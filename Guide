###Limits
/*
Try it yourself below by writing a query that limits the response to only the first 15 rows
and include the date, account_id and channel fields in the web_events table
*/
SELECT occurred_at, account_id, channel
  FROM web_events
  ORDER BY occurred_at DESC
 LIMIT 15;

 ###ORDER BY
 /*Write a query to return the 10 earliest orders in the
  orders table. Include the id, occurred_at, and total_amt_usd.
*/
 SELECT id, occurred_at, total_amt_usd
FROM orders
ORDER BY occurred_at
LIMIT 10;
/*Write a query to return the top 5 orders in terms of
largest total_amt_usd. Include the id, account_id, and total_amt_usd.
*/
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd DESC
LIMIT 5;
/*Write a query to return the lowest 20 orders in terms of smallest
total_amt_usd. Include the id, account_id, and total_amt_usd.
*/
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd
LIMIT 20;
/*Filter the accounts table to include the company name, website, and
the primary point of contact (primary_poc) just for the Exxon Mobil company in the accounts table.
*/
SELECT name, website, primary_poc
FROM accounts
WHERE name = 'Exxon Mobil Company';
/*Create a column that divides the standard_amt_usd by the standard_qty to find the unit price
for standard paper for each order. Limit the results to the first 10 orders, and include the id and
account_id fields.
*/
SELECT id, account_id, standard_amt_usd / standard_qty AS "Unit_price"
FROM orders
LIMIT 10;
/*Write a query that finds the percentage of revenue that comes from poster paper for each order.
You will need to use only the columns that end with _usd. (Try to do this without using the total column.)
Display the id and account_id fields also. NOTE - you will receive an error with the correct solution to this
question. This occurs because at least one of the values in the data creates a division by zero in your formula.
You will learn later in the course how to fully handle this issue. For now, you can just limit your calculations to
the first 10 orders, as we did in question #1, and you'll avoid that set of data that causes the problem
*/
SELECT id, account_id,
   poster_amt_usd/(standard_amt_usd + gloss_amt_usd + poster_amt_usd) AS post_per
FROM orders
LIMIT 10;
/* The LIKE operator is extremely useful for working with text. You will use LIKE within a WHERE clause.
The LIKE operator is frequently used with %. The % tells us that we might want any number of characters
leading up to a particular set of characters or following a certain set of characters, as we saw with the
google syntax above. Remember you will need to use single quotes for the text you pass to the LIKE operator,
because of this lower and uppercase letters are not the same within the string. Searching for 'T' is not
the same as searching for 't'.
*/
SELECT *
FROM web_events_full
WHERE refferal_url LIKE '%google%'
/*All the companies whose names start with 'C'.
*/
SELECT name
FROM accounts
WHERE name LIKE 'C%'
/*All companies whose names contain the string 'one' somewhere in the name.
*/
SELECT name
FROM accounts
WHERE name LIKE '&one%'
/*All companies whose names end with 's'.
*/
SELECT  names
FROM accounts
WHERE name LIKE '%s'
/* Use the accounts table to find the account name, primary_poc, and sales_rep_id
for Walmart, Target, and Nordstrom.
*/
SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name IN ('Walmart', 'Target', 'Nordstrom')
/*Use the web_events table to find all information regarding individuals who
were contacted via the channel of organic or adwords.
*/
SELECT *
FROM web_events
WHERE channel IN ('organic', 'adwords')
/*Use the accounts table to find the account name, primary poc, and sales rep id
for all stores except Walmart, Target, and Nordstrom.
*/
SELECT name, primary_poc, sales_rep_id
FROM accounts
WHERE name NOT IN ('Walmart', 'Target', 'Nordstrom')
/*Use the web_events table to find all information regarding individuals who were
contacted via any method except using organic or adwords methods
*/
SELECT *
FROM web_events
WHERE channel NOT IN ('organic', 'adwords')
/*All the companies whose names do not start with 'C'.*/
SELECT name
FROM accounts
WHERE name NOT LIKE ('C%')
/*All companies whose names do not contain the string 'one' somewhere in the name.
*/
SELECT name
FROM accounts
WHERE name NOT LIKE ('%one%')
/*All companies whose names do not end with 's'*/
SELECT name
FROM accounts
WHERE name NOT LIKE ('%s')
/*Write a query that returns all the orders where the standard_qty is over 1000,
the poster_qty is 0, and the gloss_qty is 0.
*/
SELECT *
FROM orders
WHERE standard_qty > 1000 AND poster_qty = 0 AND gloss_qty = 0
/*Using the accounts table, find all the companies whose names do not start
with 'C' and end with 's'
*/
SELECT name
FROM accounts
WHERE name NOT LIKE 'C%' AND name LIKE '%s'
/*When you use the BETWEEN operator in SQL, do the results include the values of
your endpoints, or not? Figure out the answer to this important question by writing
 a query that displays the order date and gloss_qty data for all orders where gloss_qty
 is between 24 and 29. Then look at your output to see if the BETWEEN operator included the
 begin and end values or not.
 */
 SELECT occurred_at, gloss_qty
FROM orders
WHERE gloss_qty >=24 AND gloss_qty <=29
                /OR/
SELECT occurred_at, gloss_qty
FROM orders
WHERE gloss_qty BETWEEN 24 AND 29
/*Use the web_events table to find all information regarding individuals who were contacted
 via the organic or adwords channels, and started their account at any point in 2016, sorted
 from newest to oldest.
 */
 SELECT *
FROM web_events
WHERE channel IN ('organic', 'adwords') AND occurred_at BETWEEN '2016-01-01' AND '2017-01-01'
ORDER BY occurred_at DESC;
/*Find list of orders ids where either gloss_qty or poster_qty is greater than 4000. Only include
 the id field in the resulting table
*/
SELECT id
FROM orders
WHERE gloss_qty > 4000 OR poster_qty > 4000;
/*Write a query that returns a list of orders where the standard_qty is zero and either
 the gloss_qty or poster_qty is over 1000
*/
SELECT *
FROM orders
WHERE standard_qty = 0 AND (gloss_qty > 1000 OR poster_qty > 1000);
/*Find all the company names that start with a 'C' or 'W', and the primary contact
contains 'ana' or 'Ana', but it doesn't contain 'eana'
*/
SELECT *
FROM accounts
WHERE (name LIKE 'C%' OR name LIKE 'W%')
           AND ((primary_poc LIKE '%ana%' OR primary_poc LIKE '%Ana%')
           AND primary_poc NOT LIKE '%eana%');

SECTION 2 : JOIN
/*Try pulling all the data from the accounts table, and all the data from the orders table.
*/
SELECT *
FROM accounts
JOIN orders
ON accounts.id = orders.account_id;
/*Try pulling standard_qty, gloss_qty, and poster_qty from the orders table, and the website and
the primary_poc from the accounts table.
*/
SELECT orders.standard_qty, orders.gloss_qty, orders.poster_qty, accounts.website, accounts.primary_poc
FROM orders
JOIN accounts
ON orders.account_id = accounts.id;
/*Provide a table for all web_events associated with account name of Walmart. There should be three columns.
 Be sure to include the primary_poc, time of the event, and the channel for each event. Additionally,
you might choose to add a fourth column to assure only Walmart events were chosen.
*/
SELECT a.primary_poc, w.occurred_at, w.channel, a.name
FROM web_events w
JOIN accounts a
ON w.account_id = a.id
WHERE a.name = 'Walmart';
/*Provide a table that provides the region for each sales_rep along with their associated accounts.
 Your final table should include three columns: the region name, the sales rep name, and the account name.
 Sort the accounts alphabetically (A-Z) according to account name.
 */
 SELECT r.name region, s.name rep, a.name account
 FROM sales_reps s
 JOIN region r
 ON s.region_id = r.id
 JOIN accounts a
 ON a.sales_rep_id = s.id
 ORDER BY a.name;
 /*Provide the name for each region for every order, as well as the account name and the unit price
  they paid (total_amt_usd/total) for the order. Your final table should have 3 columns: region name,
   account name, and unit price. A few accounts have 0 for total, so I divided by (total + 0.01) to assure
   not dividing by zero.
  */
  SELECT r.name region, a.name account,
       o.total_amt_usd/(o.total + 0.01) unit_price
FROM region r
JOIN sales_reps s
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id;
/*Provide a table that provides the region for each sales_rep along with their associated accounts.
 This time only for the Midwest region. Your final table should include three columns: the region name,
  the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.
*/
SELECT r.name region, s.name sales_rep, a.name account
FROM region r
JOIN sales_reps s
ON r.id = s.region_id
JOIN accounts a
ON s.id = a.sales_rep_id
WHERE r.name = 'Midwest'
ORDER BY  a.name;
/*Provide a table that provides the region for each sales_rep along with their associated accounts.
This time only for accounts where the sales rep has a first name starting with S and in the Midwest region.
Your final table should include three columns: the region name, the sales rep name, and the account name.
Sort the accounts alphabetically (A-Z) according to account name.
*/
SELECT r.name region, s.name sales_rep, a.name account
FROM region r
JOIN sales_reps s
ON r.id = s.region_id
JOIN accounts a
ON s.id = a.sales_rep_id
WHERE r.name = 'Midwest' AND s.name LIKE 'S%'
ORDER BY  a.name;
/*Provide a table that provides the region for each sales_rep along with their associated accounts.
This time only for accounts where the sales rep has a last name starting with K and in the Midwest region.
Your final table should include three columns: the region name, the sales rep name, and the account name.
Sort the accounts alphabetically (A-Z) according to account name.
*/
SSELECT r.name region, s.name rep, a.name account
FROM sales_reps s
JOIN region r
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
WHERE r.name = 'Midwest' AND s.name LIKE '% K%'
ORDER BY a.name;
/*Provide the name for each region for every order, as well as the account name and the unit price they paid
(total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity
exceeds 100. Your final table should have 3 columns: region name, account name, and unit price. In order to avoid
a division by zero error, adding .01 to the denominator here is helpful total_amt_usd/(total+0.01).
*/
SELECT r.name region, a.name account, o.total_amt_usd/(o.total + 0.01) unit_price
FROM region r
JOIN sales_reps s
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
WHERE o.standard_qty > 100;
/*Provide the name for each region for every order, as well as the account name and the unit price they paid
(total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity
exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account
name, and unit price. Sort for the smallest unit price first. In order to avoid a division by zero error, adding .01
to the denominator here is helpful (total_amt_usd/(total+0.01).
*/
SELECT r.name region, a.name account, o.total_amt_usd/(o.total + 0.01) unit_price
FROM region r
JOIN sales_reps s
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
WHERE o.standard_qty > 100 AND o.poster_qty > 50
ORDER BY unit_price;
/*Provide the name for each region for every order, as well as the account name and the unit price they paid
(total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity
exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name,
account name, and unit price. Sort for the largest unit price first. In order to avoid a division by zero error,
adding .01 to the denominator here is helpful (total_amt_usd/(total+0.01).
*/
SELECT r.name region, a.name account, o.total_amt_usd/(o.total + 0.01) unit_price
FROM region r
JOIN sales_reps s
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
WHERE o.standard_qty > 100 AND o.poster_qty > 50
ORDER BY unit_price DESC;
/*What are the different channels used by account id 1001? Your final table should have only 2 columns: account name
 and the different channels. You can try SELECT DISTINCT to narrow down the results to only the unique values.
 */
 SELECT w.channel, a.name
 FROM web_events w
 JOIN accounts a
 ON w.account_id = a.id
 WHERE a.id = '1001';
 /*Find all the orders that occurred in 2015. Your final table should have 4 columns: occurred_at, account name,
  order total, and order total_amt_usd.
*/
SELECT o.occurred_at, a.name, o.total, o.total_amt_usd
FROM accounts a
JOIN orders o
ON o.account_id = a.id
WHERE o.occurred_at BETWEEN '01-01-2015' AND '01-01-2016'
ORDER BY o.occurred_at DESC;

THIRD LESSON: AGGREGATION
/*Find the total amount of poster_qty paper ordered in the orders table.
*/
SELECT SUM(poster_qty) AS total_amt_poster_qty
FROM orders
/*Find the total amount of standard_qty paper ordered in the orders table.
*/
SELECT SUM(standard_qty) AS total_amt_standard_qty
FROM orders
/*Find the total dollar amount of sales using the total_amt_usd in the orders table.
*/
SELECT SUM(total_amt_usd) AS total_amt_usd
FROM orders
/*Find the total amount spent on standard_amt_usd and gloss_amt_usd paper for each
order in the orders table. This should give a dollar amount for each order in the table.
*/
SELECT standard_amt_usd + gloss_amt_usd AS total_standard_gloss
FROM orders;
/*Find the standard_amt_usd per unit of standard_qty paper. Your solution should use both
an aggregation and a mathematical operator.
*/
SELECT SUM(standard_amt_usd)/SUM(standard_qty) AS standard_price_per_unit
FROM orders;
/*When was the earliest order ever placed? You only need to return the date.
*/
SELECT MIN(occurred_at)
FROM orders
/*Try performing the same query as in question 1 without using an aggregation function.
*/
SELECT occurred_at
FROM orders
ORDER BY occurred_at
LIMIT 1;
/*When did the most recent (latest) web_event occur?
*/
SELECT MAX(occurred_at)
FROM web_events;
/*Try to perform the result of the previous query without using an aggregation function.
*/
SELECT occurred_at
FROM web_events
ORDER BY occurred_at DESC
LIMIT 1;
/*Find the mean (AVERAGE) amount spent per order on each paper type, as well as the mean
amount of each paper type purchased per order. Your final answer should have 6 values - one
for each paper type for the average number of sales, as well as the average amount.
*/
SELECT AVG(standard_qty) mean_standard, AVG(gloss_qty) mean_gloss,
           AVG(poster_qty) mean_poster, AVG(standard_amt_usd) mean_standard_usd,
           AVG(gloss_amt_usd) mean_gloss_usd, AVG(poster_amt_usd) mean_poster_usd
FROM orders;
/*Via the video, you might be interested in how to calculate the MEDIAN. Though this is more advanced
than what we have covered so far try finding - what is the MEDIAN total_usd spent on all orders?
*/
SELECT *
FROM (SELECT total_amt_usd
      FROM orders
      ORDER BY total_amt_usd
      LIMIT 3457) AS Table1
ORDER BY total_amt_usd DESC
LIMIT 2;
/*Which account (by name) placed the earliest order? Your solution should have the account name and
the date of the order.
*/
SELECT a.name, o.occurred_at
FROM accounts a
JOIN orders o
ON a.id = o.account_id
ORDER BY occurred_at
LIMIT 1;
/*Find the total sales in usd for each account. You should include two columns - the total sales for
each company's orders in usd and the company name.
*/
SELECT a.name, SUM(total_amt_usd) total_sales
FROM orders o
JOIN accounts a
ON a.id = o.account_id
GROUP BY a.name;
/*Via what channel did the most recent (latest) web_event occur, which account was associated
with this web_event? Your query should return only three values - the date, channel, and account name.
*/
SELECT w.occurred_at, w.channel, a.name
FROM web_events w
JOIN accounts a
ON w.account_id = a.id
ORDER BY w.occurred_at DESC
LIMIT 1;
/*Find the total number of times each type of channel from the web_events was used. Your final table
should have two columns - the channel and the number of times the channel was used.
*/
SELECT w.channel, COUNT(*)
FROM web_events w
GROUP BY w.channel
/*Who was the primary contact associated with the earliest web_event?
*/
SELECT a.primary_poc
FROM web_events w
JOIN accounts a
ON a.id = w.account_id
ORDER BY w.occurred_at
LIMIT 1;
/*What was the smallest order placed by each account in terms of total usd. Provide only two
columns - the account name and the total usd. Order from smallest dollar amounts to largest.
*/
SELECT a.name, MIN(total_amt_usd) smallest_order
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.name
ORDER BY smallest_order;
/*Find the number of sales reps in each region. Your final table should have two
columns - the region and the number of sales_reps. Order from fewest reps to most reps.
*/
SELECT r.name, COUNT(*) num_reps
FROM region r
JOIN sales_reps s
ON r.id = s.region_id
GROUP BY r.name
ORDER BY num_reps;
/*For each account, determine the average amount of each type of paper they purchased across their orders.
Your result should have four columns - one for the account name and one for the average quantity purchased
for each of the paper types for each account.
*/
SELECT a.name, AVG(standard_qty) avg_standard_qty, AVG(gloss_qty) avg_gloss_qty, AVG(poster_qty) avg_poster_qty
FROM accounts a
JOIN orders o
ON o.account_id = a.id
GROUP BY a.name
/*For each account, determine the average amount spent per order on each paper type. Your result should have four
columns - one for the account name and one for the average amount spent on each paper type.
*/
SELECT a.name, AVG(standard_amt_usd) avg_standard_amt_usd, AVG(gloss_amt_usd) avg_gloss_amt_usd, AVG(poster_amt_usd) avg_poster_amt
FROM accounts a
JOIN orders o
ON o.account_id = a.id
GROUP BY a.name
/*Determine the number of times a particular channel was used in the web_events table for each sales rep.
Your final table should have three columns - the name of the sales rep, the channel, and the number of occurrences.
Order your table with the highest number of occurrences first.
*/
SELECT s.name, w.channel, COUNT(*) num_events
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.name, w.channel
ORDER BY num_events DESC;
/*Determine the number of times a particular channel was used in the web_events table for each region.
Your final table should have three columns - the region name, the channel, and the number of occurrences.
Order your table with the highest number of occurrences first.
*/
SELECT r.name, w.channel, COUNT(*) num_events
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
JOIN sales_reps s
ON s.id = a.sales_rep_id
JOIN region r
ON r.id = s.region_id
GROUP BY r.name, w.channel
ORDER BY num_events DESC;
/*Use DISTINCT to test if there are any accounts associated with more than one region.
*/
SELECT a.id as "account id", r.id as "region id",
a.name as "account name", r.name as "region name"
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
JOIN region r
ON r.id = s.region_id;

and

SELECT DISTINCT id, name
FROM accounts;
/*Have any sales reps worked on more than one account?
*/
SELECT s.id, s.name, COUNT(*) num_accounts
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.id, s.name
ORDER BY num_accounts;

and

SELECT DISTINCT id, name
FROM sales_reps;
/*How many of the sales reps have more than 5 accounts that they manage?
*/
SELECT s.id, s.name, COUNT(*) account
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.id, s.name
HAVING COUNT(*) > 5
ORDER BY account
/*How many accounts have more than 20 orders?
*/
SELECT a.id, a.name, COUNT(*) orders
FROM orders o
JOIN accounts a
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING COUNT(*) > 20
ORDER BY orders
/*Which account has the most orders?
*/
SELECT a.id, a.name, COUNT(*) orders
FROM orders o
JOIN accounts a
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY orders DESC
LIMIT 1;
/*Which accounts spent more than 30,000 usd total across all orders?
*/
SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING SUM(o.total_amt_usd) > 30000
ORDER BY total_spent;
/*Which accounts spent less than 1,000 usd total across all orders?
*/
SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING SUM(o.total_amt_usd) < 1000
ORDER BY total_spent;
/*Which account has spent the most with us?
*/
SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY total_spent DESC
LIMIT 1;
/*Which account has spent the least with us?
*/
SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY total_spent
LIMIT 1;
/*Which accounts used facebook as a channel to contact customers more than 6 times?
*/
SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY a.id, a.name, w.channel
HAVING COUNT(*) > 6 AND w.channel = 'facebook'
ORDER BY use_of_channel;
/*Which account used facebook most as a channel?
*/
SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
WHERE w.channel = 'facebook'
GROUP BY a.id, a.name, w.channel
ORDER BY use_of_channel DESC
LIMIT 1;
/*Which channel was most frequently used by most accounts?
*/
SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY a.id, a.name, w.channel
ORDER BY use_of_channel DESC
LIMIT 10;
/*Find the sales in terms of total dollars for all orders in each year,
ordered from greatest to least. Do you notice any trends in the yearly sales totals?
*/
SELECT DATE_PART('year', occurred_at) ord_year,  SUM(total_amt_usd) total_spent
 FROM orders
 GROUP BY 1
 ORDER BY 2 DESC;
/*Which month did Parch & Posey have the greatest sales in terms of total dollars?
Are all months evenly represented by the dataset?
*/
SELECT DATE_PART('month', occurred_at) ord_month, SUM(total_amt_usd) total_spent
FROM orders
WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
GROUP BY 1
ORDER BY 2 DESC;
/*Which year did Parch & Posey have the greatest sales in terms of total
number of orders? Are all years evenly represented by the dataset?
*/
SELECT DATE_PART('year', occurred_at) ord_year,  COUNT(*) total_sales
FROM orders
GROUP BY 1
ORDER BY 2 DESC;
/*Which month did Parch & Posey have the greatest sales in terms of
total number of orders? Are all months evenly represented by the dataset?
*/
SELECT DATE_PART('month', occurred_at) ord_month, COUNT(*) total_sales
FROM orders
WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
GROUP BY 1
ORDER BY 2 DESC;
/*In which month of which year did Walmart spend the most on gloss paper in terms of dollars?
*/
SELECT a.name, DATE_TRUNC('month', occurred_at), SUM(gloss_amt_usd) AS gloss_paper
FROM orders o
JOIN accounts a
ON a.id = o.account_id
WHERE a.name = 'Walmart'
GROUP BY DATE_TRUNC('month', occurred_at), a.name
ORDER BY gloss_paper DESC
LIMIT 1;
/*Write a query to display for each order, the account ID, total amount of the order,
and the level of the order - ‘Large’ or ’Small’ - depending on if the order is $3000 or more, or smaller than $3000.
*/
SELECT account_id, total_amt_usd,
CASE WHEN total_amt_usd > 3000 THEN 'Large'
ELSE 'Small' END AS order_level
FROM orders;
/*Write a query to display the number of orders in each of three categories, based on the total number of items
in each order. The three categories are: 'At Least 2000', 'Between 1000 and 2000' and 'Less than 1000'.
*/
SELECT CASE WHEN total >= 2000 THEN 'At Least 2000'
   WHEN total >= 1000 AND total < 2000 THEN 'Between 1000 and 2000'
   ELSE 'Less than 1000' END AS order_category,
COUNT(*) AS order_count
FROM orders
GROUP BY 1;
/*We would like to understand 3 different levels of customers based on the amount associated with their purchases.
The top level includes anyone with a Lifetime Value (total sales of all orders) greater than 200,000 usd.
The second level is between 200,000 and 100,000 usd. The lowest level is anyone under 100,000 usd. Provide a
table that includes the level associated with each account. You should provide the account name, the total sales
of all orders for the customer, and the level. Order with the top spending customers listed first.
*/
SELECT a.name, SUM(total_amt_usd) total_spent,
     CASE WHEN SUM(total_amt_usd) > 200000 THEN 'top'
     WHEN  SUM(total_amt_usd) > 100000 THEN 'middle'
     ELSE 'low' END AS customer_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
GROUP BY a.name
ORDER BY 2 DESC;
/*We would now like to perform a similar calculation to the first, but we want to obtain the total amount spent by
customers only in 2016 and 2017. Keep the same levels as in the previous question. Order with the top spending
customers listed first.
*/
SELECT a.name, SUM(total_amt_usd) total_spent,
     CASE WHEN SUM(total_amt_usd) > 200000 THEN 'top'
     WHEN  SUM(total_amt_usd) > 100000 THEN 'middle'
     ELSE 'low' END AS customer_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
WHERE occurred_at > '2015-12-31'
GROUP BY 1
ORDER BY 2 DESC;
/*We would like to identify top performing sales reps, which are sales reps associated with more than 200 orders.
Create a table with the sales rep name, the total number of orders, and a column with top or not depending on if
they have more than 200 orders. Place the top sales people first in your final table.
*/
SELECT s.name, COUNT(*) num_ords,
     CASE WHEN COUNT(*) > 200 THEN 'top'
     ELSE 'not' END AS sales_rep_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.name
ORDER BY 2 DESC;
/*The previous didn't account for the middle, nor the dollar amount associated with the sales.
Management decides they want to see these characteristics represented as well. We would like to identify top performing
 sales reps, which are sales reps associated with more than 200 orders or more than 750000 in total sales.
 The middle group has any rep with more than 150 orders or 500000 in sales. Create a table with the sales rep name,
 the total number of orders, total sales across all orders, and a column with top, middle, or low depending on
 this criteria. Place the top sales people based on dollar amount of sales first in your final table.
 You might see a few upset sales people by this criteria!
*/
SELECT s.name, COUNT(*), SUM(o.total_amt_usd) total_spent,
     CASE WHEN COUNT(*) > 200 OR SUM(o.total_amt_usd) > 750000 THEN 'top'
     WHEN COUNT(*) > 150 OR SUM(o.total_amt_usd) > 500000 THEN 'middle'
     ELSE 'low' END AS sales_rep_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.name
ORDER BY 3 DESC;
/*We want to find the average number of events for each day for each channel. The first table will provide us the
number of events for each day and channel, and then we will need to average these values together using a second query.
*/
SELECT channel, AVG(events_number) AS avg_events_number
FROM
(SELECT DATE_TRUNC('day', occurred_at) AS day, channel, COUNT(*) AS events_number
FROM web_events
GROUP BY 1, 2
) sub
GROUP BY 1
ORDER BY 2 DESC
/*The average amount of standard paper, gloss paper and poster paper sold on the first month that any order was
 placed in the orders table (in terms of quantity).
 */
 SELECT AVG(standard_qty) AS avg_standard, AVG(gloss_qty) AS avg_gloss, AVG(poster_qty) AS avg_poster
FROM orders
WHERE DATE_TRUNC('month', occurred_at) =
	(SELECT DATE_TRUNC('month', MIN(occurred_at)) AS min_month
	FROM orders)
/*The total amount spent on all orders on the first month that any order was placed in the orders table (in terms of usd).
*/
SELECT SUM(total_amt_usd)
FROM orders
WHERE DATE_TRUNC('month', occurred_at) =
	(SELECT DATE_TRUNC('month', MIN(occurred_at)) AS min_month
	FROM orders)
/*Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales.
*/
SELECT t3.sales_reps, t2.region, t2.total_sales
FROM
	(SELECT region, MAX(total_sales) AS total_sales
	FROM
	(SELECT s.name AS sales_reps, r.name AS 		region, SUM(o.total_amt_usd) AS total_sales
	FROM sales_reps s
	JOIN region r
	ON s.region_id = r.id
	JOIN accounts a
	ON s.id = a.sales_rep_id
	JOIN orders o
	ON a.id = o.id
	GROUP BY 1, 2) t1
	GROUP BY 1
	ORDER BY 2 DESC) t2
JOIN
	(SELECT s.name AS sales_reps, r.name AS 		region, SUM(o.total_amt_usd) AS total_sales
	FROM sales_reps s
	JOIN region r
	ON s.region_id = r.id
	JOIN accounts a
	ON s.id = a.sales_rep_id
	JOIN orders o
	ON a.id = o.id
	GROUP BY 1, 2) t3
	ON t2.region = t3.region AND t2.total_sales = 	t3.total_sales
  /*For the region with the largest (sum) of sales total_amt_usd, how many total (count) orders were placed?
  */
  SELECT r.name, COUNT(o.total) total_orders
FROM sales_reps s
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
JOIN region r
ON r.id = s.region_id
GROUP BY r.name
HAVING SUM(o.total_amt_usd) = (
      SELECT MAX(total_amt)
      FROM (SELECT r.name region_name, SUM(o.total_amt_usd) total_amt
              FROM sales_reps s
              JOIN accounts a
              ON a.sales_rep_id = s.id
              JOIN orders o
              ON o.account_id = a.id
              JOIN region r
              ON r.id = s.region_id
              GROUP BY r.name) sub);
/*How many accounts had more total purchases than the account name
which has bought the most standard_qty paper throughout their lifetime as a customer?
*/
SELECT COUNT(*)
FROM
	(SELECT a.name
	FROM accounts a
	JOIN orders o
	ON a.id = o.account_id
	GROUP BY 1
	HAVING SUM(o.total) >
	(SELECT total_purchases
	FROM (SELECT a.name account_name, SUM(o.standard_qty) standard, 	SUM(o.total) total_purchases
	FROM accounts a
	JOIN orders o
	ON a.id = o.account_id
	GROUP BY 1
	LIMIT 1) inner_tab)
  )outer_tab
/*For the customer that spent the most (in total over their lifetime as a customer) total_amt_usd,
how many web_events did they have for each channel?
*/
SELECT a.id, a.name, w.channel, COUNT(*)
FROM accounts a
JOIN web_events w
ON a.id = w.account_id AND a.id = (
	SELECT id
	FROM (
	SELECT a.id, a.name customer_name, SUM(o.total_amt_usd) 			sum_total
	FROM accounts a
	JOIN orders o
	ON a.id = o.account_id
	GROUP BY 1, 2
	ORDER BY 3 DESC
	LIMIT 1) inner_tab)
GROUP BY 1, 2,3
ORDER BY 4 DESC
/*What is the lifetime average amount spent in terms of total_amt_usd for the top 10 total spending accounts?
*/
SELECT AVG(tot_spent)
FROM (SELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent
      FROM orders o
      JOIN accounts a
      ON a.id = o.account_id
      GROUP BY a.id, a.name
      ORDER BY 3 DESC
       LIMIT 10) temp;
/*What is the lifetime average amount spent in terms of total_amt_usd, including only the companies that
 spent more per order, on average, than the average of all orders.
 */
       SELECT AVG(avg_amt)
       FROM (SELECT o.account_id, AVG(o.total_amt_usd) avg_amt
           FROM orders o
           GROUP BY 1
           HAVING AVG(o.total_amt_usd) > (SELECT AVG(o.total_amt_usd) avg_all
                                          FROM orders o)) temp_table;
/*Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales.
*/
WITH t1 AS (
           SELECT s.name rep_name, r.name region_name, SUM(o.total_amt_usd) total_amt
           FROM sales_reps s
           JOIN accounts a
           ON a.sales_rep_id = s.id
           JOIN orders o
           ON o.account_id = a.id
           JOIN region r
           ON r.id = s.region_id
           GROUP BY 1,2
           ORDER BY 3 DESC),
     t2 AS (
           SELECT region_name, MAX(total_amt) total_amt
           FROM t1
           GROUP BY 1)
SELECT t1.rep_name, t1.region_name, t1.total_amt
FROM t1
JOIN t2
ON t1.region_name = t2.region_name AND t1.total_amt = t2.total_amt;
/*
/*For the region with the largest sales total_amt_usd, how many total orders were placed?
*/
WITH t1 AS (SELECT r.name region_name, SUM(total_amt_usd) sum_total
	FROM orders o
	JOIN accounts a
	ON a.id = o.account_id
	JOIN sales_reps s
	ON s.id = a.sales_rep_id
	JOIN region r
	ON s.region_id = r.id
	GROUP BY 1),
	t2 AS (SELECT MAX(sum_total) max_total
       FROM t1)
SELECT r.name region_name, COUNT(o.total) total_count
FROM orders o
JOIN accounts a
ON a.id = o.account_id
JOIN sales_reps s
ON s.id = a.sales_rep_id
JOIN region r
ON s.region_id = r.id
GROUP BY 1
HAVING SUM(total_amt_usd) = (SELECT * FROM t2)
/*How many accounts had more total purchases than the account name which has bought
the most standard_qty paper throughout their lifetime as a customer?
*/
WITH t1 AS (
  SELECT a.name account_name, SUM(o.standard_qty) total_std, SUM(o.total) total
  FROM accounts a
  JOIN orders o
  ON o.account_id = a.id
  GROUP BY 1
  ORDER BY 2 DESC
  LIMIT 1),
t2 AS (
  SELECT a.name
  FROM orders o
  JOIN accounts a
  ON a.id = o.account_id
  GROUP BY 1
  HAVING SUM(o.total) > (SELECT total FROM t1))
SELECT COUNT(*)
FROM t2;
/*For the customer that spent the most (in total over their lifetime as a customer) total_amt_usd,
how many web_events did they have for each channel?
*/
WITH t1 AS (SELECT a.id account_id, a.name account_name, SUM(o.total_amt_usd) total_usd
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY 1, 2
ORDER BY 3 DESC
LIMIT 1)
SELECT a.name acct_name, w.channel web_channel, COUNT(*)
FROM web_events w
JOIN accounts a
ON a.id =w.account_id AND a.id = (SELECT account_id FROM t1)
GROUP BY 1, 2
/*What is the lifetime average amount spent in terms of total_amt_usd for the top 10 total spending accounts?
*/
WITH t1 AS (
   SELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent
   FROM orders o
   JOIN accounts a
   ON a.id = o.account_id
   GROUP BY a.id, a.name
   ORDER BY 3 DESC
   LIMIT 10)
SELECT AVG(tot_spent)
FROM t1;
/*What is the lifetime average amount spent in terms of total_amt_usd, including only the companies that
spent more per order, on average, than the average of all orders.
*/
WITH t1 AS (
   SELECT AVG(o.total_amt_usd) avg_all
   FROM orders o
   JOIN accounts a
   ON a.id = o.account_id),
t2 AS (
   SELECT o.account_id, AVG(o.total_amt_usd) avg_amt
   FROM orders o
   GROUP BY 1
   HAVING AVG(o.total_amt_usd) > (SELECT * FROM t1))
SELECT AVG(avg_amt)
FROM t2;

SQL CLEANING
/*In the accounts table, there is a column holding the website for each company. The last three digits specify
what type of web address they are using. A list of extensions (and pricing) is provided here. Pull these extensions
and provide how many of each website type exist in the accounts table.
*/
SELECT RIGHT(website, 3) AS domain, COUNT(*)
FROM accounts
GROUP BY 1
ORDER BY 2 DESC
/*There is much debate about how much the name (or even the first letter of a company name) matters. Use the accounts
table to pull the first letter of each company name to see the distribution of company names that begin
with each letter (or number).
*/
SELECT LEFT(UPPER(name), 1) AS first_letter, COUNT(*) num_companies
FROM accounts
GROUP BY 1
ORDER BY 2 DESC;
/*Use the accounts table and a CASE statement to create two groups: one group of company names that start with a
number and a second group of those company names that start with a letter. What proportion of company names start
with a letter?
*/
SELECT SUM(num) nums, SUM(letter) letters
FROM (SELECT name, CASE WHEN LEFT(UPPER(name), 1) IN ('0','1','2','3','4','5','6','7','8','9')
                       THEN 1 ELSE 0 END AS num,
         CASE WHEN LEFT(UPPER(name), 1) IN ('0','1','2','3','4','5','6','7','8','9')
                       THEN 0 ELSE 1 END AS letter
      FROM accounts) t1;
/*Consider vowels as a, e, i, o, and u. What proportion of company names start with a vowel, and what
percent start with anything else?
*/
      SELECT SUM(vowels) vowels, SUM(other) other
      FROM (SELECT name, CASE WHEN LEFT(UPPER(name), 1) IN ('A','E','I','O','U')
                              THEN 1 ELSE 0 END AS vowels,
                CASE WHEN LEFT(UPPER(name), 1) IN ('A','E','I','O','U')
                             THEN 0 ELSE 1 END AS other
               FROM accounts) t1;
/*Use the accounts table to create first and last name columns that hold the first and last names for the primary_poc.
*/
               SELECT LEFT(primary_poc, STRPOS(primary_poc, ' ') -1 ) first_name,
               RIGHT(primary_poc, LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name
               FROM accounts;
/*Now see if you can do the same thing for every rep name in the sales_reps table. Again provide first
and last name columns.
*/
SELECT LEFT(name, STRPOS(name, ' ') -1 ) first_name,
       RIGHT(name, LENGTH(name) - STRPOS(name, ' ')) last_name
FROM sales_reps;
/*Each company in the accounts table wants to create an email address for each primary_poc. The email address
should be the first name of the primary_poc . last name primary_poc @ company name .com.
*/
WITH t1 AS (
 SELECT LEFT(primary_poc,     STRPOS(primary_poc, ' ') -1 ) first_name,  RIGHT(primary_poc,
LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name, name
 FROM accounts)
SELECT first_name, last_name, CONCAT(first_name, '.', last_name, '@', name, '.com')
FROM t1;
/*You may have noticed that in the previous solution some of the company names include spaces, which will
certainly not work in an email address. See if you can create an email address that will work by removing
all of the spaces in the account name, but otherwise your solution should be just as in question 1.
Some helpful documentation is here.
*/
SELECT primary_poc, name, CONCAT(first_name, '.', last_name, '@', REPLACE(name,' ','') , '.com')
FROM (SELECT name, primary_poc, LEFT(primary_poc, POSITION(' ' IN primary_poc) -1)first_name,
RIGHT(primary_poc, LENGTH(primary_poc) - POSITION(' ' IN primary_poc)) last_name
FROM accounts) t1
/*We would also like to create an initial password, which they will change after their first log in.
The first password will be the first letter of the primary_poc's first name (lowercase), then the last letter
of their first name (lowercase), the first letter of their last name (lowercase), the last letter of
their last name (lowercase), the number of letters in their first name, the number of letters in their
last name, and then the name of the company they are working with, all capitalized with no spaces.
*/
WITH t1 AS (
 SELECT LEFT(primary_poc,     STRPOS(primary_poc, ' ') -1 ) first_name,  RIGHT(primary_poc,
   LENGTH(primary_poc) - STRPOS(primary_poc, ' ')) last_name, name
 FROM accounts)
SELECT first_name, last_name, CONCAT(first_name, '.', last_name, '@', name, '.com') AS email_address, (LEFT(LOWER(first_name), 1)
|| RIGHT(LOWER(first_name), 1) || LEFT(LOWER(last_name), 1) || RIGHT(LOWER(last_name), 1) || LENGTH(first_name)
|| LENGTH(last_name) || REPLACE(UPPER(name), ' ', '')) AS password
FROM t1;
/*Write a query to change the date into the correct SQL date format. You will need to use at least SUBSTR and CONCAT
to perform this operation.
*/
SELECT date orig_date, (SUBSTR(date, 7, 4) || '-' || LEFT(date, 2) || '-' || SUBSTR(date, 4, 2)) new_date
FROM sf_crime_data
/*Once you have created a column in the correct format, use either CAST or :: to convert this to a date.
*/
SELECT date orig_date, (SUBSTR(date, 7, 4) || '-' || LEFT(date, 2) || '-' || SUBSTR(date, 4, 2))::DATE new_date
FROM sf_crime_data;
/*Use COALESCE to fill in the accounts.id column with the account.id for the NULL value for the table in 1
*/
SELECT COALESCE(o.id, a.id) filled_id, a.name, a.website, a.lat, a.long, a.primary_poc, a.sales_rep_id, o.*
FROM accounts a
LEFT JOIN orders o
ON a.id = o.account_id
WHERE o.total IS NULL;
/*Use COALESCE to fill in the orders.account_id column with the account.id for the NULL value for the table in 1
*/
SELECT COALESCE(o.id, a.id) filled_id, a.name, a.website, a.lat, a.long, a.primary_poc, a.sales_rep_id, COALESCE(o.account_id, a.id) account_id, o.occurred_at, o.standard_qty, o.gloss_qty, o.poster_qty, o.total, o.standard_amt_usd, o.gloss_amt_usd, o.poster_amt_usd, o.total_amt_usd
FROM accounts a
LEFT JOIN orders o
ON a.id = o.account_id
WHERE o.total IS NULL;
/*Use COALESCE to fill in each of the qty and usd columns with 0 for the table in 1
*/
SELECT COALESCE(o.id, a.id) filled_id, a.name, a.website, a.lat, a.long, a.primary_poc, a.sales_rep_id, COALESCE(o.account_id, a.id) account_id, o.occurred_at, COALESCE(o.standard_qty, 0) standard_qty, COALESCE(o.gloss_qty,0) gloss_qty, COALESCE(o.poster_qty,0) poster_qty, COALESCE(o.total,0) total, COALESCE(o.standard_amt_usd,0) standard_amt_usd, COALESCE(o.gloss_amt_usd,0) gloss_amt_usd, COALESCE(o.poster_amt_usd,0) poster_amt_usd, COALESCE(o.total_amt_usd,0) total_amt_usd
FROM accounts a
LEFT JOIN orders o
ON a.id = o.account_id
WHERE o.total IS NULL;
/*Run the query in 1 with the WHERE removed and COUNT the number of ids
*/
SELECT COUNT(*)
FROM accounts a
LEFT JOIN orders o
ON a.id = o.account_id;
/*Run the query in 5, but with the COALESCE function used in questions 2 through 4
*/
SELECT COALESCE(o.id, a.id) filled_id, a.name, a.website, a.lat, a.long, a.primary_poc, a.sales_rep_id, COALESCE(o.account_id, a.id) account_id, o.occurred_at, COALESCE(o.standard_qty, 0) standard_qty, COALESCE(o.gloss_qty,0) gloss_qty, COALESCE(o.poster_qty,0) poster_qty, COALESCE(o.total,0) total, COALESCE(o.standard_amt_usd,0) standard_amt_usd, COALESCE(o.gloss_amt_usd,0) gloss_amt_usd, COALESCE(o.poster_amt_usd,0) poster_amt_usd, COALESCE(o.total_amt_usd,0) total_amt_usd
FROM accounts a
LEFT JOIN orders o
ON a.id = o.account_id;
/*Using Derek's previous video as an example, create another running total. This time, create a running total
of standard_amt_usd (in the orders table) over order time with no date truncation. Your final table should
have two columns: one with the amount being added for each new row, and a second with the running total.
*/
SELECT standard_amt_usd,
       SUM(standard_amt_usd) OVER (ORDER BY occurred_at) AS running_total
FROM orders
/*Now, modify your query from the previous quiz to include partitions. Still create a running
total of standard_amt_usd (in the orders table) over order time, but this time, date truncate occurred_at
by year and partition by that same year-truncated occurred_at variable. Your final table should have
three columns: One with the amount being added for each row, one for the truncated date, and a final column
with the running total within each year.
*/
SELECT standard_amt_usd,
       DATE_TRUNC('year', occurred_at) as year,
       SUM(standard_amt_usd) OVER (PARTITION BY DATE_TRUNC('year', occurred_at) ORDER BY occurred_at) AS running_total
FROM orders
/*Select the id, account_id, and total variable from the orders table, then create a column called total_rank that ranks
this total amount of paper ordered (from highest to lowest) for each account using a partition. Your final table
should have these four columns.
*/
SELECT id,
       account_id,
       total,
       RANK() OVER (PARTITION BY account_id ORDER BY total DESC) AS total_rank
FROM orders

/*Now, create and use an alias to shorten the following query (which is different than the one in Derek's
previous video) that has multiple window functions. Name the alias account_year_window, which is more descriptive
than main_window in the example above.
*/
SELECT id,
       account_id,
       DATE_TRUNC('year',occurred_at) AS year,
       DENSE_RANK() OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at)) AS dense_rank,
       total_amt_usd,
       SUM(total_amt_usd) OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at)) AS sum_total_amt_usd,
       COUNT(total_amt_usd) OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at)) AS count_total_amt_usd,
       AVG(total_amt_usd) OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at)) AS avg_total_amt_usd,
       MIN(total_amt_usd) OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at)) AS min_total_amt_usd,
       MAX(total_amt_usd) OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at)) AS max_total_amt_usd
FROM orders
/*  SHORTEN YOUR WINDOW FUNCTION QUERIES BY ALIASING */ Shorten Your Window Function Queries by Aliasing*/
SELECT id,
       account_id,
       DATE_TRUNC('year',occurred_at) AS year,
       DENSE_RANK() OVER (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at)) AS dense_rank,
       total_amt_usd,
       SUM(total_amt_usd) OVER main_window AS sum_total_amt_usd,
       COUNT(total_amt_usd) OVER main_window AS count_total_amt_usd,
       AVG(total_amt_usd) OVER main_window AS avg_total_amt_usd,
       MIN(total_amt_usd) OVER main_window AS min_total_amt_usd,
       MAX(total_amt_usd) OVER main_window AS max_total_amt_usd
FROM orders
WINDOW main_window AS (PARTITION BY account_id ORDER BY DATE_TRUNC('year',occurred_at))

Comparing a Row to Previous Row
/*In the previous video, Derek outlines how to compare a row to a previous or subsequent row. This technique can be
useful when analyzing time-based events. Imagine you're an analyst at Parch & Posey and you want to determine how
the current order's total revenue ("total" meaning from sales of all types of paper) compares to the next order's
total revenue.*/

/*Modify Derek's query from the previous video in the SQL Explorer below to perform this analysis. You'll need to use
occurred_at and total_amt_usd in the orders table along with LEAD to do so. In your query results, there should be
four columns: occurred_at, total_amt_usd, lead, and lead_difference.
*/
SELECT occurred_at,
       total_amt_usd,
       LEAD(total_amt_usd) OVER (ORDER BY occurred_at) AS lead,
       LEAD(total_amt_usd) OVER (ORDER BY occurred_at) - total_amt_usd AS lead_difference
FROM (
SELECT occurred_at,
       SUM(total_amt_usd) AS total_amt_usd
  FROM orders
 GROUP BY 1
) sub
/*Use the NTILE functionality to divide the accounts into 4 levels in terms of the amount of standard_qty for their
orders. Your resulting table should have the account_id, the occurred_at time for each order, the total amount of
standard_qty paper purchased, and one of four levels in a standard_quartile column.
*/
SELECT
       account_id,
       occurred_at,
       standard_qty,
       NTILE(4) OVER (PARTITION BY account_id ORDER BY standard_qty) AS standard_quartile
  FROM orders
 ORDER BY account_id DESC
/*Use the NTILE functionality to divide the accounts into two levels in terms of the amount of gloss_qty for their
orders. Your resulting table should have the account_id, the occurred_at time for each order, the total amount of
gloss_qty paper purchased, and one of two levels in a gloss_half column.
*/
 SELECT
       account_id,
       occurred_at,
       gloss_qty,
       NTILE(2) OVER (PARTITION BY account_id ORDER BY gloss_qty) AS gloss_half
  FROM orders
 ORDER BY account_id DESC
/*Use the NTILE functionality to divide the orders for each account into 100 levels in terms of the amount of
total_amt_usd for their orders. Your resulting table should have the account_id, the occurred_at time for each
order, the total amount of total_amt_usd paper purchased, and one of 100 levels in a total_percentile column.
*/
 SELECT account_id, occurred_at, total_amt_usd, NTILE(100) OVER (PARTITION BY account_id ORDER BY total_amt_usd) AS total_percentile
 FROM orders
 ORDER BY account_id DESC

[Advanced] SQL Advanced JOINs & Performance Tuning
/*each account who has a sales rep and each sales rep that has an account (all of the columns in these returned
rows will be full)
*/
SELECT *
FROM accounts a
FULL JOIN sales_reps s ON a.sales_rep_id = s.id
/*but also each account that does not have a sales rep and each sales rep that does not have an account (some of
the columns in these returned rows will be empty)
*/
SELECT *
FROM accounts a
FULL JOIN sales_reps s ON a.sales_rep_id = s.id
WHERE a.sales_rep_id IS NULL OR s.id IS NULL
/*In the following SQL Explorer, write a query that left joins the accounts table and the sales_reps tables on each
sale rep's ID number and joins it using the < comparison operator on accounts.primary_poc and sales_reps.name,
like so:
accounts.primary_poc < sales_reps.name
The query results should be a table with three columns: the account name (e.g. Johnson Controls), the primary contact
 name (e.g. Cammy Sosnowski), and the sales representative's name (e.g. Samuel Racine). Then answer the subsequent
 multiple choice question.
*/
SELECT accounts.name as account_name,
       accounts.primary_poc as poc_name,
       sales_reps.name as sales_rep_name
  FROM accounts
  LEFT JOIN sales_reps
    ON accounts.sales_rep_id = sales_reps.id
   AND accounts.primary_poc < sales_reps.name

   /*Modify the query from the previous video, which is pre-populated in the SQL Explorer below, to perform the
   same interval analysis except for the web_events table.
   */
   SELECT o1.id AS o1_id,
          o1.account_id AS o1_account_id,
          o1.occurred_at AS o1_occurred_at,
          o2.id AS o2_id,
          o2.account_id AS o2_account_id,
          o2.occurred_at AS o2_occurred_at
     FROM orders o1
    LEFT JOIN orders o2
      ON o1.account_id = o2.account_id
     AND o2.occurred_at > o1.occurred_at
     AND o2.occurred_at <= o1.occurred_at + INTERVAL '28 days'
   ORDER BY o1.account_id, o1.occurred_at
   /*Also:
   change the interval to 1 day to find those web events that occurred after, but not more than 1 day after,
   another web event
   add a column for the channel variable in both instances of the table in your query
   */
   SELECT we1.id AS we_id,
       we1.account_id AS we1_account_id,
       we1.occurred_at AS we1_occurred_at,
       we1.channel AS we1_channel,
       we2.id AS we2_id,
       we2.account_id AS we2_account_id,
       we2.occurred_at AS we2_occurred_at,
       we2.channel AS we2_channel
  FROM web_events we1
 LEFT JOIN web_events we2
   ON we1.account_id = we2.account_id
  AND we1.occurred_at > we2.occurred_at
  AND we1.occurred_at <= we2.occurred_at + INTERVAL '1 day'
ORDER BY we1.account_id, we2.occurred_at
